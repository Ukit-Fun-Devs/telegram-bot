from __future__ import annotations

from typing import TYPE_CHECKING

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from sqlalchemy import insert

from utils.basic import GROUP_KAB
from utils.filters.is_registered import IsNotRegistered, _check_registered
from utils.keybords import MAIN_MENU_KEYBOARD
from utils.keybords.authorize import AUTHORIZE
from utils.services.database import async_session
from utils.services.database.models import User
from utils.states import RegistrationState

if TYPE_CHECKING:
    from aiogram.types import Message

authorize_router = Router()


@authorize_router.message(F.text == AUTHORIZE, IsNotRegistered())
@authorize_router.callback_query(F.data == "start_registration", IsNotRegistered())
async def authorize_handler(message: Message | CallbackQuery) -> None:
    if isinstance(message, CallbackQuery):
        message = message.message

    text: str = "‚öôÔ∏è \\| –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\\!"
    reply_markup: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –¢—É—Ç–æ—Ä–∏–∞–ª", callback_data="tutorial")],
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="registration-step-1")]
        ]
    )

    try:
        await message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest:
        await message.answer(text, reply_markup=reply_markup)


@authorize_router.callback_query(F.data == "tutorial")
async def tutorial(callback: CallbackQuery) -> None:
    await callback.message.edit_text(
        "üóìÔ∏è \\| –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω–æ:\n"
        ">1\\. –ó–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üåê –°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", url="https://dec.mgutm.ru")],
                [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="tutorial-step-1")]
            ]
        )
    )


@authorize_router.callback_query(F.data == "tutorial-step-1")
async def tutorial_step_1(callback: CallbackQuery) -> None:
    await callback.message.delete()
    await callback.message.answer_photo(
        photo="https://i.ibb.co/phdKgFD/first.png",
        caption=">2\\. –ù–∞–π—Ç–∏ –ø–∞–Ω–µ–ª—å–∫—É \"–ì—Ä—É–ø–ø–∞\"",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üåê –°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", url="https://dec.mgutm.ru")],
                [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="tutorial-step-2")]
            ]
        )
    )


@authorize_router.callback_query(F.data == "tutorial-step-2")
async def tutorial_step_2(callback: CallbackQuery) -> None:
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media="https://i.ibb.co/Nj7LpX9/second.png",
            caption=">3\\. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É"
        ),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üåê –°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", url="https://dec.mgutm.ru")],
                [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="tutorial-step-3")]
            ]
        )
    )


@authorize_router.callback_query(F.data == "tutorial-step-3")
async def tutorial_step_3(callback: CallbackQuery) -> None:
    await callback.message.delete()
    await callback.message.answer(
        text="‚úÖ \\| –í—ã –ø—Ä–æ—à–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Å—Å—ã–ª–∫–∏ üòÑ\\!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", callback_data="start_registration")]
            ] if not _check_registered(callback.message) else [
                [InlineKeyboardButton(text="üíñ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add-group-start")]
            ]
        )
    )


@authorize_router.callback_query(F.data == "registration-step-1", IsNotRegistered())
async def registration_step_1(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(RegistrationState.group_id)

    await callback.message.edit_text(
        "üì§ \\| –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—é –≥—Ä—É–ø–øy\\!"
    )


@authorize_router.message(RegistrationState.group_id, IsNotRegistered())
async def registration_step_2(message: Message, state: FSMContext) -> None:
    matcher = GROUP_KAB.match(message.text)

    if not (matcher.group(1) if matcher else False):
        await message.answer(
            "üö´ \\| –£–∫–∞–∑–∞–ª–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞\\!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üíî –ü—Ä–æ–π—Ç–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª –µ—â–µ —Ä–∞–∑ ", callback_data="tutorial")],
                    [InlineKeyboardButton(text="üôÇ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="registration-step-1")]
                ]
            )
        )
        return await state.clear()

    await state.update_data(group_id=int(matcher.group(1)))
    await state.set_state(RegistrationState.first_name)
    await message.answer(
        "üì§ \\| –£–∫–∞–∂–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é\\!\n"
        ">–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –≤–ª–∏—è—é—Ç, —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"
    )


@authorize_router.message(RegistrationState.first_name, IsNotRegistered())
async def registration_step_3(message: Message, state: FSMContext) -> None:
    await state.update_data(first_name=message.text)
    await state.set_state(RegistrationState.second_name)
    await message.answer(
        "üì§ \\| –£–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è\\!\n"
        ">–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –≤–ª–∏—è—é—Ç, —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"
    )


@authorize_router.message(RegistrationState.second_name, IsNotRegistered())
async def registration_step_4(message: Message, state: FSMContext) -> None:
    await state.update_data(second_name=message.text)
    await state.set_state(RegistrationState.third_name)
    message = await message.answer(
        "üì§ \\| –£–∫–∞–∂–∏ —Å–≤–æe –æ—Ç—á–µ—Å—Ç–≤–æ\\!\n"
        ">–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –≤–ª–∏—è—é—Ç, —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="registration-step-5")]
            ]
        )
    )
    await state.update_data(message=message)


@authorize_router.callback_query(F.data == "registration-step-5", IsNotRegistered())
@authorize_router.message(RegistrationState.third_name, IsNotRegistered())
async def registration_step_5(message: Message | CallbackQuery, state: FSMContext) -> None:
    if isinstance(message, CallbackQuery):
        message = message.message
    else:
        await state.update_data(third_name=message.text)

    message = (await state.get_data())["message"]
    await message.bot.delete_message(message.chat.id, message.message_id)
    await message.answer(
        "üîî \\| –ù—É–∂–Ω–æ –ª–∏ –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± –æ–±–µ–¥–µ –∏ –ø–∞—Ä–∞—Ö\\?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üëç –î–∞", callback_data="registration-step-yes"),
                InlineKeyboardButton(text="üëé –ù–µ—Ç", callback_data="registration-step-no")
            ]]
        )
    )


@authorize_router.callback_query(F.data == "registration-step-yes", IsNotRegistered())
async def registration_step_yes(message: Message | CallbackQuery, state: FSMContext) -> None:
    await state.update_data(reminded=True)
    await registration_finish(message, state)


@authorize_router.callback_query(F.data == "registration-step-no", IsNotRegistered())
async def registration_step_yes(message: Message | CallbackQuery, state: FSMContext) -> None:
    await state.update_data(reminded=False)
    await registration_finish(message, state)


async def registration_finish(message: Message | CallbackQuery, state: FSMContext) -> None:
    if isinstance(message, CallbackQuery):
        message = message.message

    data = await state.get_data()
    del data["message"]
    data["tg_id"] = message.chat.id

    async with async_session() as session:
        async with session.begin():
            await session.execute(
                insert(User).values(data)
            )

    await message.delete()
    await message.answer(
        "*‚úÖ \\| –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å\\!*\n\n"
        "*–ö—Ä–∞—Ç–∫–∏–π —ç–∫—Å–∫—É—Ä—Å –ø–æ –±–æ—Ç—É:*\n\n"
        "1\\. ‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n"
        "_–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è \\(–ø–æ –∫–∞–∫–æ–µ\\-—Ç–æ —á–∏—Å–ª–æ\\)\\. "
        "–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–ª—è —Å–µ–±—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã\\._\n\n"
        "2\\. üìÖ *–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*\n"
        "_–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –∏ —É–¥–æ–±–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –Ω–∞—à–µ–º –ª—é–±–∏–º–æ–º —Ç–≥ <3_\n",
        # "3\\. üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ –ø—Ä–∏—Ö–æ–¥–µ*\n"
        # "_–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–∞—Ä\\. –û—Ç–º–µ—á–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ –¥–ª—è –≤–∞—Å\\._\n"
        # "_–ï—Å–ª–∏ –≤—ã –ø—Ä–∏—à–ª–∏ –Ω–∞ –ø–∞—Ä—ã, –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø–∞—Ä–∞—Ö/–æ–±–µ–¥–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\\._\n\n",
        reply_markup=MAIN_MENU_KEYBOARD
    )
    await state.clear()

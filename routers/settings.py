from __future__ import annotations

import ast
from random import choice
from typing import Optional, TYPE_CHECKING

from aiogram import Router, F
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, InputMediaPhoto

from utils.basic import GROUP_KAB
from utils.filters.is_registered import IsRegistered
from utils.keybords import DELETE_MESSAGE_MARKUP
from utils.services.database.handlers import UserTools
from utils.services.draw import DrawService
from utils.services.draw.models import Design
from utils.services.parser import MgutmTools
from utils.states import GroupAddState

if TYPE_CHECKING:
    from aiogram.types import Message

settings_router = Router()

HEARTS = ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "ü§ç", "ü§é", "üíó", "üíì", "üíï", "üíû", "üíù"]


class ChangeGroupCallback(CallbackData, prefix="callback-data-change-group"):
    group_id: int


class ChangeThemeCallback(CallbackData, prefix="callback-data-change-theme"):
    theme_id: str


@settings_router.callback_query(F.data == "clear-all-saved-groups", IsRegistered())
async def clear_all_saved_groups_handler(callback: CallbackQuery) -> None:
    await callback.message.edit_text(
        "‚úÖ \\| –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –±—ã–ª –æ—Ç—á–∏—â–µ–Ω\\!",
        reply_markup=DELETE_MESSAGE_MARKUP
    )
    await UserTools.clean_saved_groups(tg_id=callback.from_user.id)


@settings_router.callback_query(F.data == "add-group-start", IsRegistered())
async def add_group_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(GroupAddState.group_id)

    await callback.message.edit_text(
        "üì§ \\| –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–øy\\!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìö –¢—É—Ç–æ—Ä–∏–∞–ª", callback_data="tutorial")]
            ]
        )
    )


@settings_router.message(GroupAddState.group_id, IsRegistered())
async def get_group_id_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    matcher = GROUP_KAB.match(message.text)

    group_id: Optional[int] = None
    if not ((group_id := int(matcher.group(1))) if matcher else False):
        await message.answer(
            "üö´ \\| –£–∫–∞–∑–∞–ª–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞\\!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üíî –ü—Ä–æ–π—Ç–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª –µ—â–µ —Ä–∞–∑ ", callback_data="tutorial")],
                    [InlineKeyboardButton(text="üôÇ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="add-group-start")]
                ]
            )
        )
        return

    user = await UserTools.get(message.chat.id)
    saved_groups = ast.literal_eval(user.saved_groups)
    if len(saved_groups) >= 5:
        await message.answer(
            "üíî \\| –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ\\!"
        )
        return

    if group_id in saved_groups:
        await message.answer(
            "üíî \\| –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ\\!"
        )
        return
    if group_id == user.group_id:
        await message.answer(
            "üíî \\| –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ\\!"
        )
        return

    await UserTools.update_groups(message.chat.id, [group_id])
    await message.answer(
        "‚úÖ \\| –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞\\, —Ç–µ–ø–µ—Ä—å –µ–µ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\\!",
        reply_markup=DELETE_MESSAGE_MARKUP
    )


@settings_router.callback_query(ChangeGroupCallback.filter(F.group_id), IsRegistered())
async def change_group_callback_handler(callback: CallbackQuery, callback_data: ChangeGroupCallback) -> None:
    user = await UserTools.get(callback.message.chat.id)
    await UserTools.update_groups(
        callback.message.chat.id,
        groups=[user.group_id],
        remove_groups=[callback_data.group_id],
        set_group=callback_data.group_id
    )

    await callback.message.edit_text(
        "‚úÖ \\| –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞\\, —Å–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\\!",
        reply_markup=DELETE_MESSAGE_MARKUP
    )


@settings_router.callback_query(F.data == "change-group", IsRegistered())
async def change_group_handler(callback: CallbackQuery) -> None:
    await callback.message.edit_text(
        "üí´ \\| –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É\\/–¥–æ–±–∞–≤—å –µ–µ\\:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(
                text=f"{choice(HEARTS)} "
                     f"{info.text_id if (info := (await MgutmTools.get_info(group_id))) else group_id}",
                callback_data=ChangeGroupCallback(group_id=group_id).pack()
            )] for group_id in await UserTools.get_groups(callback.from_user.id)] + [[
                InlineKeyboardButton(text="üíñ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add-group-start"),
                InlineKeyboardButton(text="‚ú® –û—á–∏—Å—Ç–∏—Ç—å –≥—Ä—É–ø–ø—ã", callback_data="clear-all-saved-groups")
            ]]
        )
    )


@settings_router.callback_query(F.data == "change-design", IsRegistered())
async def change_design_handler(callback: CallbackQuery) -> None:
    user = await UserTools.get(callback.from_user.id)
    await callback.message.edit_text(
        "üîß \\| –í—ã–±–µ—Ä–∏ –¥–∏–∑–∞–π–Ω –¥–ª—è –±–æ—Ç–∞\\:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=design.name + (" | ‚≠ê" if user.theme == design.key else ""),
                    callback_data=ChangeThemeCallback(theme_id=design.key).pack()
                )]
                for design in await DrawService.get_designs()
            ]
        )
    )


@settings_router.callback_query(ChangeThemeCallback.filter(F.theme_id), IsRegistered())
async def selected_design_handler(callback: CallbackQuery, callback_data: ChangeThemeCallback) -> None:
    design: Design = list(filter(lambda x: x.key == callback_data.theme_id, await DrawService.get_designs()))[0]
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=design.preview,
            caption=f"‚úÖ \\| –î–∏–∑–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω\\! –ü—Ä–∏–º–µ—Ä –≤—ã—à–µ\\."
        ),
        reply_markup=DELETE_MESSAGE_MARKUP
    )

    await UserTools.set_theme(tg_id=callback.from_user.id, theme_key=design.key)
